(c) 2011..2020 Sigrid/Jasper Neumann
www.sirrida.de / programming.sirrida.de
E-Mail: info@sirrida.de

Granted to the public domain
First version: 2013-02-23
Last change: 2013-04-11


Formal grammar for the Modula-style program flow statements for C / C++.
For an implementation see modula.h and case_*.*.

Zero or more: { ... }
Optional:     [ ... ]
Either/or:    ... | ...


block_macro :=
  "BEGIN"
    statement_list
  "END"


while_macro :=
  "WHILE" expression "DO"
    statement_list
  "END"


if_macro :=
  "IF" expression "DO"
    statement_list
  { "ELIF" expression "DO"  statement_list }
  [ "ELSE" statement_list ]
  "END"


loop_macro :=
  "LOOP(" int_expression ")"
    statement_list
  "END"


for_macro :=
  for_kind
      ordinal_type ','
      loop_variable ","
      ordinal_expression ","
      ordinal_expression ")"
    statement_list
  "END"

for_kind :=
  "FOR(" | "FOR_REV("


switch_macro :=
  "SWITCH(" string_expression ")"
  { case_head statement_list }
  [ "DEFAULT" statement_list ]
  "END"

case_head :=
  single_case | multi_case0 | multi_case1

single_case :=
  "CASE(" string_constant ")"

multi_case0 :=
  "CASE_MULTI0"
  { "CASE_OR(" string_constant ")" }
  "CASE_DO"

multi_case1 :=
  "CASE_MULTI(" string_constant ")"
  { "CASE_OR(" string_constant ")" }
  "CASE_DO"
